//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package boot

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &moduleConfigurer_{}
		},
	})
	moduleConfigurerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ModuleConfigurer{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(moduleConfigurerStructDescriptor)
}

type moduleConfigurer_ struct {
	Configure_ func() ([]func(), error)
}

func (m *moduleConfigurer_) Configure() ([]func(), error) {
	return m.Configure_()
}

type ModuleConfigurerIOCInterface interface {
	Configure() ([]func(), error)
}

var _moduleConfigurerSDID string

func GetModuleConfigurerSingleton() (*ModuleConfigurer, error) {
	if _moduleConfigurerSDID == "" {
		_moduleConfigurerSDID = util.GetSDIDByStructPtr(new(ModuleConfigurer))
	}
	i, err := singleton.GetImpl(_moduleConfigurerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*ModuleConfigurer)
	return impl, nil
}

func GetModuleConfigurerIOCInterfaceSingleton() (ModuleConfigurerIOCInterface, error) {
	if _moduleConfigurerSDID == "" {
		_moduleConfigurerSDID = util.GetSDIDByStructPtr(new(ModuleConfigurer))
	}
	i, err := singleton.GetImplWithProxy(_moduleConfigurerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(ModuleConfigurerIOCInterface)
	return impl, nil
}
