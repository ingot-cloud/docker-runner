//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package log

import (
	"docker-runner/pkg/framework/ioc"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	allimpls "github.com/alibaba/ioc-golang/extension/autowire/allimpls"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &logConfigurer_{}
		},
	})
	logConfigurerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &LogConfigurer{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"allimpls": map[string]interface{}{
					"interfaces": []interface{}{
						new(ioc.ModuleConfigurer),
					},
				},
			},
		},
	}
	allimpls.RegisterStructDescriptor(logConfigurerStructDescriptor)
}

type logConfigurer_ struct {
	Order_        func() uint
	Configure_    func()
	Run_          func() (func(), error)
	setLevel_     func(level int)
	setFormatter_ func(format string)
}

func (l *logConfigurer_) Order() uint {
	return l.Order_()
}

func (l *logConfigurer_) Configure() {
	l.Configure_()
}

func (l *logConfigurer_) Run() (func(), error) {
	return l.Run_()
}

func (l *logConfigurer_) setLevel(level int) {
	l.setLevel_(level)
}

func (l *logConfigurer_) setFormatter(format string) {
	l.setFormatter_(format)
}

type LogConfigurerIOCInterface interface {
	Order() uint
	Configure()
	Run() (func(), error)
	setLevel(level int)
	setFormatter(format string)
}

var _logConfigurerSDID string
